name: Verification pipeline for each PR

on:
  push:
    branches:
      - master
      - dev

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: docker compose -f ci/docker-compose.lint.yml run lint

      - name: Clean up containers
        run: |
          docker compose -f ci/docker-compose.lint.yml down lint

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: docker compose -f ci/docker-compose.build.yml run build

      - name: Clean up containers
        run: |
          docker compose -f ci/docker-compose.build.yml down build

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: docker compose -f ci/docker-compose.unit-tests.yml run unit_tests

      - name: Clean up containers
        run: |
          docker compose -f ci/docker-compose.unit-tests.yml down unit_tests

  api-e2e-tests:
    name: API E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: NODE_ENV=test API_URL=http://makefilm:80 FIXTURES=false SEEDS=false DATABASE_PORT=5433 DATABASE_URL="postgresql://poll_user:poll_password@makefilm_db_test:5432/poll_db?schema=public" docker compose --env-file .env up --abort-on-container-exit database db_configurator api api-e2e

      - name: Clean up containers
        run: |
          docker compose down database db_configurator api api-e2e

  web-e2e-tests:
    name: Web E2E Tests
    runs-on: ubuntu-latest
    needs: api-e2e-tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: NODE_ENV=test API_URL=http://makefilm:80 FIXTURES=true SEEDS=false DATABASE_PORT=5433 DATABASE_URL="postgresql://poll_user:poll_password@makefilm_db_test:5432/poll_db?schema=public" docker compose --env-file .env up --abort-on-container-exit database db_configurator api web nginx web-e2e

      - name: Clean up containers
        run: |
          docker compose down database db_configurator api web nginx web-e2e

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: web-e2e-tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Show me the version
        run: 'echo "Current version: ${{ steps.package-version.outputs.current-version }}"'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Build and Tag Docker Image
        run: |
          docker compose -f apps/api/ci/docker-compose.release.yml build api-release
          docker tag makefilm/api ghcr.io/alexsergey/makefilm-api:latest

      - name: Push Docker Image to GitHub Container Registry
        run: docker push ghcr.io/alexsergey/makefilm-api:latest

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: release
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to production (master)
        if: github.ref == 'refs/heads/master'
        run: echo "Deploying to production environment (master)..."

      - name: Deploy to staging (dev)
        if: github.ref == 'refs/heads/dev'
        run: echo "Deploying to staging environment (dev)..."
